AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy VPC, EC2, S3, and Lambda with S3 trigger using a Custom Resource

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium]

Mappings:
  RegionMap:
    us-east-2:
      AMI: ami-0012607760f46be7b
    us-west-2:
      AMI: ami-002384cde9dc9fed8

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", AMI ]
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "cf-s3-bucket-${AWS::AccountId}-${AWS::Region}"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                Resource: "*"

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: s3-event-logger
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Code:
        ZipFile: |
          def handler(event, context):
              print("S3 Event Received:", event)

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt MyS3Bucket.Arn

  CustomS3NotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import json

          def handler(event, context):
              s3 = boto3.client('s3')
              bucket = event['ResourceProperties']['Bucket']
              lambdaArn = event['ResourceProperties']['LambdaArn']
              s3.put_bucket_notification_configuration(
                  Bucket=bucket,
                  NotificationConfiguration={
                      'LambdaFunctionConfigurations': [
                          {
                              'LambdaFunctionArn': lambdaArn,
                              'Events': ['s3:ObjectCreated:*']
                          }
                      ]
                  }
              )
              return {'Status': 'SUCCESS'}

  CustomResourceTrigger:
    Type: Custom::S3LambdaNotification
    DependsOn: LambdaInvokePermission
    Properties:
      ServiceToken: !GetAtt CustomS3NotificationLambda.Arn
      Bucket: !Ref MyS3Bucket
      LambdaArn: !GetAtt LambdaFunction.Arn

Outputs:
  BucketName:
    Value: !Ref MyS3Bucket
  LambdaName:
    Value: !Ref LambdaFunction
  InstanceID:
    Value: !Ref EC2Instance
